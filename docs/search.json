[
  {
    "objectID": "materials/labs/lab1-github.html",
    "href": "materials/labs/lab1-github.html",
    "title": "Github basics",
    "section": "",
    "text": "This lab activity introduces GitHub repositories and basic Git actions; students will be expected to use these skills to access materials and complete assignments."
  },
  {
    "objectID": "materials/labs/lab1-github.html#prerequisites",
    "href": "materials/labs/lab1-github.html#prerequisites",
    "title": "Github basics",
    "section": "Prerequisites",
    "text": "Prerequisites\nTo complete the lab activity you’ll need to:\n\nhave all of the software listed on the course technology page installed;\nfind (or create) your GitHub account credentials.\n\n\n\n\n\n\n\nAction\n\n\n\nPreparations:\n\nLog in to your GitHub account.\nAccept the invitation to join the PSTAT197 GitHub organization. Check your UCSB email for the invitation. If you have not received one, request it from a TA or ULA.\nOpen your GitHub client."
  },
  {
    "objectID": "materials/labs/lab1-github.html#whats-github",
    "href": "materials/labs/lab1-github.html#whats-github",
    "title": "Github basics",
    "section": "What’s GitHub?",
    "text": "What’s GitHub?\n\nGit and GitHub\nAt some point in time – possibly just a moment ago – you had to install Git on your local machine, as well as create a GitHub account. So, Git and GitHub are two different things.\nGit is version control software that enables you to systematically track and control file changes within a repository – a collection of files possibly with some directory structure. (A repository is simply a storage place.)\nGitHub is an online platform for hosting repositories remotely. Anyone with access to a repository can make changes to files in the repository, and this enables multiple people to collaborate on code.\n\n\nlocal <> remote\nUsually remote repositories are not updated directly because contributors need to execute codes to test their changes and the remote server that hosts the repository is not equipped to do this.\nSo, making changes to a repository typically involves communicating information between local and remote locations. If I want to alter a file and make those changes available to anyone else accessing my repository, most of the time I need to:\n\ncreate/update local copies of repository files, say, on my laptop;\nmake the desired change(s) locally;\nsend the changes back to the remote repository;\nupdate the remote repository by accepting changes.\n\nThese steps correspond to a sequence of Git actions: actions that modify the repository files and/or metadata. The most basic sequence is:\n\ngit pull update the local repository (technically, fetch changes + merge changes from the remote repository);\ngit add stage file changes to be committed to the local repository;\ngit commit commit staged changes to the local repository;\ngit push send committed changes back to the remote repository.\n\nSometimes contributors take different or additional actions; the complexity of the Git actions required to make a change depends largely on repository settings, permissions, and agreements among collaborators about how workflow should be structured.\n\n\nWhy are we using GitHub repositories?\nMaintaining communication between local and remote copies of a set of files might seem overly complicated, but version control has many benefits, including the ability to track changes and contributions precisely, work in parallel with other contributors, revert to prior versions of files, keep track of issues, quickly share and disseminate work, and solicit user contributions from the coding public. Arguably, for all of these reasons and because of its widespread use, Git/GitHub is a must for data scientists.\nIn this class you’ll learn and practice some basics that will allow you to easily access course files, collaborate with each other, and efficiently submit your coursework. This should equip you to utilize a repository for efficient collaboration with your peers on your capstone project."
  },
  {
    "objectID": "materials/labs/lab1-github.html#creating-a-clone",
    "href": "materials/labs/lab1-github.html#creating-a-clone",
    "title": "Github basics",
    "section": "Creating a clone",
    "text": "Creating a clone\nIn Git lingo, a clone is a local copy of a remote repository. Creating a clone copies files and establishes the link between local and remote repositories so that changes can be sent to and received from the remote repository. You only need to create a clone once.\nTo clone a repository, all one needs is:\n\nthe remote location URL;\nthe local destination where the clone will be created;\npermission from the repository owner, if private.\n\nI’ve created a ‘sandbox’ repository (for playing in) at https://github.com/pstat197/sandbox. It’s a public repository, so no special permissions are needed. Follow the link to see the repository contents in your browser.\n\n\n\n\n\n\nAction\n\n\n\nClone the sandbox repository:\n\nOpen your GitHub client (GitKracken or GitHub Desktop or similar) and ensure you are logged in to your GitHub account.\nLook for a ‘Clone Repo’ menu item or similar and simply input the URL and the place you’d like to clone it; proceed through any prompts.\nCheck your file navigator to confirm that the repository files were copied.\n\n\n\nAn alternative possibility is to create the clone using a terminal command. In the terminal, navigate to the desired destination, and input:\ngit clone https://github.com/pstat197/sandbox\n\n\n\n\n\n\nRemarks\n\n\n\nOn terminal commands:\n\nIt’s recommended to manage Git actions through a visual client, as it’s much easier to see and understand what’s happening.\nHowever, if you know exactly what you’re doing, executing simple actions via Git bash in the terminal can be more efficient at times.\nFor example, you can keep a terminal open in RStudio and manage your repository workflow from there, without having to toggle between environments.\nTry experimenting with terminal commands from RStudio after you have a little experience with basic Git actions."
  },
  {
    "objectID": "materials/labs/lab1-github.html#pre-lab-checklist",
    "href": "materials/labs/lab1-github.html#pre-lab-checklist",
    "title": "Github basics",
    "section": "Pre-lab checklist",
    "text": "Pre-lab checklist\nHave you completed all of the pre-lab activity action items?\n\nInstall software: R, RStudio, Git, and a GitHub client\nCreate a GitHub account and join the course GitHub org\nClone the sandbox repo https://github.com/pstat197/sandbox"
  },
  {
    "objectID": "materials/labs/lab1-github.html#basic-git-actions",
    "href": "materials/labs/lab1-github.html#basic-git-actions",
    "title": "Github basics",
    "section": "Basic Git actions",
    "text": "Basic Git actions\nHere you’ll make a local change and then push that change to the remote repository.\n\nPull\nAs discussed in the pre-lab activity, the first step to making a change is beginning with the most up-to-date version of the repository files. Your TA will have made a small change to the repository since you first cloned it, so we’ll start with retrieving that change.\n\n\n\n\n\n\nAction\n\n\n\nPull changes from the remote repository:\n\nIn your GitHub client, open the sandbox repository and then look for a ‘Pull’ menu item.\nIn the terminal: navigate to the root directory of the repository and git pull\n\nTechnically, git pull is git fetch + git merge. If you ever wish to examine changes without modifying local files, you can git fetch.\n\n\nExamine the updated local repository files; notice that there is now a folder named after your lab section.\n\n\nMake changes\nNow that you have the most up-to-date version of all files, create a new markdown file in your lab section folder with a fun fact about you (or anything else if you’d rather) that you’ll upload to the repository.\n\n\nStage\n\n\nCommit\n\n\nPush"
  },
  {
    "objectID": "materials/labs/lab1-github.html#branching",
    "href": "materials/labs/lab1-github.html#branching",
    "title": "Github basics",
    "section": "Branching",
    "text": "Branching\n\nWhen and why to branch\n\n\nCreate a branch\n\n\nCommit and push a change\n\n\nAccess your neighbor’s branch"
  },
  {
    "objectID": "materials/labs/lab1-github.html#pull-requests",
    "href": "materials/labs/lab1-github.html#pull-requests",
    "title": "Github basics",
    "section": "Pull requests",
    "text": "Pull requests"
  },
  {
    "objectID": "materials/labs/lab1-github.html#workflow",
    "href": "materials/labs/lab1-github.html#workflow",
    "title": "Github basics",
    "section": "Workflow",
    "text": "Workflow"
  },
  {
    "objectID": "materials/labs/lab1-github.html#forks",
    "href": "materials/labs/lab1-github.html#forks",
    "title": "Github basics",
    "section": "Forks",
    "text": "Forks"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Most students take this course to prepare for their work on sponsored team projects during the remainder of the capstone sequence (PSTAT197B-C/CMPSC190DE-DF). However, some may elect to take the course for other reasons, such as an upcoming faculty-supervised research project or internship.\nThis site hosts course information and resources for currently enrolled students."
  },
  {
    "objectID": "materials/lab-activities.html",
    "href": "materials/lab-activities.html",
    "title": "Lab activities",
    "section": "",
    "text": "Lab 1 on GitHub basics"
  }
]